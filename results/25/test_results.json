{
  "exitCode": 0,
  "harnessOutput": "{\n    \"django__django-11848\": {\n        \"patch_is_None\": false,\n        \"patch_exists\": true,\n        \"patch_successfully_applied\": true,\n        \"resolved\": false,\n        \"tests_status\": {\n            \"FAIL_TO_PASS\": {\n                \"success\": [],\n                \"failure\": [\n                    \"test_parsing_rfc850 (utils_tests.test_http.HttpDateProcessingTests)\",\n                    \"test_parsing_year_less_than_70 (utils_tests.test_http.HttpDateProcessingTests)\"\n                ]\n            },\n            \"PASS_TO_PASS\": {\n                \"success\": [],\n                \"failure\": [\n                    \"test_input_too_large (utils_tests.test_http.Base36IntTests)\",\n                    \"test_invalid_literal (utils_tests.test_http.Base36IntTests)\",\n                    \"test_negative_input (utils_tests.test_http.Base36IntTests)\",\n                    \"test_roundtrip (utils_tests.test_http.Base36IntTests)\",\n                    \"test_to_base36_errors (utils_tests.test_http.Base36IntTests)\",\n                    \"test_to_int_errors (utils_tests.test_http.Base36IntTests)\",\n                    \"test_values (utils_tests.test_http.Base36IntTests)\",\n                    \"test (utils_tests.test_http.EscapeLeadingSlashesTests)\",\n                    \"test_quote (utils_tests.test_http.URLQuoteTests)\",\n                    \"test_quote_plus (utils_tests.test_http.URLQuoteTests)\",\n                    \"test_unquote (utils_tests.test_http.URLQuoteTests)\",\n                    \"test_unquote_plus (utils_tests.test_http.URLQuoteTests)\",\n                    \"test_parsing (utils_tests.test_http.ETagProcessingTests)\",\n                    \"test_quoting (utils_tests.test_http.ETagProcessingTests)\",\n                    \"test_allowed_hosts_str (utils_tests.test_http.IsSafeURLTests)\",\n                    \"test_bad_urls (utils_tests.test_http.IsSafeURLTests)\",\n                    \"test_basic_auth (utils_tests.test_http.IsSafeURLTests)\",\n                    \"test_good_urls (utils_tests.test_http.IsSafeURLTests)\",\n                    \"test_is_safe_url_deprecated (utils_tests.test_http.IsSafeURLTests)\",\n                    \"test_no_allowed_hosts (utils_tests.test_http.IsSafeURLTests)\",\n                    \"test_secure_param_https_urls (utils_tests.test_http.IsSafeURLTests)\",\n                    \"test_secure_param_non_https_urls (utils_tests.test_http.IsSafeURLTests)\",\n                    \"test_bad (utils_tests.test_http.IsSameDomainTests)\",\n                    \"test_good (utils_tests.test_http.IsSameDomainTests)\",\n                    \"test_roundtrip (utils_tests.test_http.URLSafeBase64Tests)\",\n                    \"test_http_date (utils_tests.test_http.HttpDateProcessingTests)\",\n                    \"test_parsing_asctime (utils_tests.test_http.HttpDateProcessingTests)\",\n                    \"test_parsing_rfc1123 (utils_tests.test_http.HttpDateProcessingTests)\",\n                    \"test_custom_iterable_not_doseq (utils_tests.test_http.URLEncodeTests)\",\n                    \"test_dict (utils_tests.test_http.URLEncodeTests)\",\n                    \"test_dict_containing_empty_sequence_doseq (utils_tests.test_http.URLEncodeTests)\",\n                    \"test_dict_containing_sequence_doseq (utils_tests.test_http.URLEncodeTests)\",\n                    \"test_dict_containing_sequence_not_doseq (utils_tests.test_http.URLEncodeTests)\",\n                    \"test_dict_containing_tuple_not_doseq (utils_tests.test_http.URLEncodeTests)\",\n                    \"test_dict_with_bytearray (utils_tests.test_http.URLEncodeTests)\",\n                    \"test_dict_with_bytes_values (utils_tests.test_http.URLEncodeTests)\",\n                    \"test_dict_with_sequence_of_bytes (utils_tests.test_http.URLEncodeTests)\",\n                    \"test_generator (utils_tests.test_http.URLEncodeTests)\",\n                    \"test_multivaluedict (utils_tests.test_http.URLEncodeTests)\",\n                    \"test_none (utils_tests.test_http.URLEncodeTests)\",\n                    \"test_none_in_generator (utils_tests.test_http.URLEncodeTests)\",\n                    \"test_none_in_sequence (utils_tests.test_http.URLEncodeTests)\",\n                    \"test_tuples (utils_tests.test_http.URLEncodeTests)\"\n                ]\n            },\n            \"FAIL_TO_FAIL\": {\n                \"success\": [],\n                \"failure\": []\n            },\n            \"PASS_TO_FAIL\": {\n                \"success\": [],\n                \"failure\": []\n            }\n        }\n    }\n}"
}